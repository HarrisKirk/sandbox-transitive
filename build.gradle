repositories {
    maven { url rupRepoExtUrl }
    ivy { url rupRepoReleaseUrl }
    if ( project.hasProperty('developPlugins') ) {
        ivy { url file(System.getProperty('user.home') + '/.ivylocal') }
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'

//so that we can use 'compile', 'testCompile' for dependencies

dependencies {
  compile "com.copyright.rup.common:rup-common-util:2.+"
  compile group: 'com.google.code.guice', name: 'guice', version: '1.+'

    
}

println ''
configurations.findAll {it.name == 'compile'}.each { conf ->
    println "Configuration: '${conf.name}'"  
    println ''
    println 'Declared Dependencies:'
    ResolutionResult rr = conf.incoming.resolutionResult
    rr.getAllDependencies().eachWithIndex { obj, i ->
        DependencyResult dr = obj
        ModuleVersionSelector mvs = dr.requested
        println "$i ".padRight(5) + mvs.group.padRight(35) + mvs.name.padRight(35) + mvs.version.padRight(20)   
    }
     
    println ''
    println 'Resolved:'
    rr.getAllModuleVersions().eachWithIndex { obj, i ->
       ResolvedModuleVersionResult rmvr =  obj
       ModuleVersionIdentifier mvi = rmvr.id 
       println "$i ".padRight(5) + mvi.group.padRight(35) + mvi.name.padRight(35) + mvi.version.padRight(20)   
    }
}


project.task('printArtifactDependencies') {
    group 'RUP'
    description 'Prints all artifacts in dependencies blocks'
    doLast {
        def COLUMN_PAD = 2
        def SEP_CHAR = '-'
        final String GROUP_KEY = 'consumedGroup'
        final String OUTPUT_FILE_KEY = 'outputFile'
        if (!project.hasProperty(GROUP_KEY)) {
            throw new GradleException("Usage: gradlew -P${GROUP_KEY}=xxxx [-P${OUTPUT_FILE_KEY}=myfile] printArtifactDependencies")
        }
        
        Closure inclusionCriteria = {
            if (!it.group) return false   // gradle does not return group for some deps
            boolean intraProjectDependency = it.group == project.group
            boolean matchesUserPattern = it.group ==~ project.getProperty(GROUP_KEY)
            matchesUserPattern && !intraProjectDependency
        }
        
        
        def dependencyList = []
        project.allprojects.each { proj ->
            proj.configurations.findAll {it.name == 'compile'}.each { conf ->
                ResolutionResult rr = conf.incoming.resolutionResult
                rr.getAllModuleVersions().each { 
                    ResolvedModuleVersionResult rmvr =  it
                    ModuleVersionIdentifier mvi = rmvr.id
                    dependencyList << [
                        (DependencyColumn.PROJECT.name())     : proj.name,
                        (DependencyColumn.CONFIG.name())      : conf.name,
                        (DependencyColumn.GROUP.name())       : mvi.group,
                        (DependencyColumn.NAME.name())        : mvi.name,
                        (DependencyColumn.VERSION.name())     : mvi.version 
                        ]
                }

                println ''                
                println 'DEPS::::'                
                rr.getAllDependencies().eachWithIndex { obj, i ->
                    DependencyResult dr = obj
                    ModuleVersionSelector mvs = dr.requested
                    ResolvedModuleVersionResult rmvr = dr.from
                    println "$i ".padRight(5) + mvs.group.padRight(35) + mvs.name.padRight(35) + mvs.version.padRight(20) + '  ' + dr
                }
                println ''
                
            }
        }
         dependencyList.each { 
             println '' +
                 it[DependencyColumn.GROUP.name()].padRight(30) +
                 it[DependencyColumn.NAME.name()].padRight(30) +
                 it[DependencyColumn.VERSION.name()].padRight(30) 
             
         }
    }
}

enum DependencyColumn {
    REPO_NAME ('Consuming Repo', true),
    PROJECT ('Consuming Project', true),
    BRANCHES ('Branch', true),
    CONFIG ('Configuration', false),
    GROUP ('Consumed Group', true),
    NAME ('Consumed Artifact', true),
    VERSION ('Version', true),
    
    String colName
    def length
    boolean dataDisplay
    
    DependencyColumn(def colName, boolean dataDisplay) {
        this.colName = colName
        this.length = colName.size()
        this.dataDisplay = dataDisplay
    }
    
}


repositories {
    maven { url rupRepoExtUrl }
    ivy { url rupRepoReleaseUrl }
    if ( project.hasProperty('developPlugins') ) {
        ivy { url file(System.getProperty('user.home') + '/.ivylocal') }
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'

//so that we can use 'compile', 'testCompile' for dependencies

dependencies {
  compile "com.copyright.rup.common:rup-common-util:2.+"
  compile group: 'com.google.code.guice', name: 'guice', version: '1.+'

    
}

println ''
configurations.findAll {it.name == 'compile'}.each { conf ->
    println "Configuration: '${conf.name}'"  
    println ''
    ResolutionResult rr = conf.incoming.resolutionResult
    def requestedList = rr.getAllDependencies()
     
    println ''
    println 'Resolved:'
    def resolvedList = rr.getAllModuleVersions()
    resolvedList.eachWithIndex { obj, i ->
       ResolvedModuleVersionResult rmvr =  obj
       ModuleVersionIdentifier mvi = rmvr.id
       def requested = getRequestedVersion (mvi, requestedList) ? '(' + getRequestedVersion (mvi, requestedList) + ')' : ''
       println "$i ".padRight(5) + mvi.group.padRight(35) + mvi.name.padRight(35) + mvi.version.padRight(20) + requested 
    }
}

String getRequestedVersion(mvi, requestedList) {
        // returns first value but could easily be more than 1 (some "1+" others 1.2, 1.2.1 ), in which case the
        // matchesStrictly might simply return a different version (rather than the expected dynamic version)
        // It's a discussion point.
        // TODO: How to handle more than 1 
        DependencyResult dr = requestedList.find { it.requested.group == mvi.group && it.requested.name == mvi.name }
        if ( dr == null ) return ''
        ModuleVersionSelector mvs = dr.requested
        return mvs.matchesStrictly(mvi) ? '' : mvs.version
}


project.task('printArtifactDependencies') {
    group 'RUP'
    description 'Prints all artifacts in dependencies blocks'
    doLast {
        def COLUMN_PAD = 2
        def SEP_CHAR = '-'
        final String GROUP_KEY = 'consumedGroup'
        final String OUTPUT_FILE_KEY = 'outputFile'
        if (!project.hasProperty(GROUP_KEY)) {
            throw new GradleException("Usage: gradlew -P${GROUP_KEY}=xxxx [-P${OUTPUT_FILE_KEY}=myfile] printArtifactDependencies")
        }
        
        Closure inclusionCriteria = {
            if (!it.group) return false   // gradle does not return group for some deps
            boolean intraProjectDependency = it.group == project.group
            boolean matchesUserPattern = it.group ==~ project.getProperty(GROUP_KEY)
            matchesUserPattern && !intraProjectDependency
        }
        
        
        def dependencyList = []
        project.allprojects.each { proj ->
            proj.configurations.findAll {it.name == 'compile'}.each { conf ->
                ResolutionResult rr = conf.incoming.resolutionResult
                def requestedList = rr.getAllDependencies()
                def resolvedList = rr.getAllModuleVersions()
                resolvedList.each { 
                    ResolvedModuleVersionResult rmvr =  it
                    ModuleVersionIdentifier mvi = rmvr.id
                    dependencyList << [
                        (DependencyColumn.PROJECT.name())           : proj.name,
                        (DependencyColumn.CONFIG.name())            : conf.name,
                        (DependencyColumn.GROUP.name())             : mvi.group,
                        (DependencyColumn.NAME.name())              : mvi.name,
                        (DependencyColumn.VERSION.name())           : mvi.version, 
                        (DependencyColumn.VERSION_REQUESTED.name()) : getRequestedVersion (mvi, requestedList), 
                        ]
                }

                
            }
        }
         dependencyList.each { 
             println '' +
                 it[DependencyColumn.GROUP.name()].padRight(30) +
                 it[DependencyColumn.NAME.name()].padRight(30) +
                 it[DependencyColumn.VERSION.name()].padRight(10) +  
                 it[DependencyColumn.VERSION_REQUESTED.name()].padRight(10)
                 
         }
    }
}

enum DependencyColumn {
    REPO_NAME ('Consuming Repo', true),
    PROJECT ('Consuming Project', true),
    BRANCHES ('Branch', true),
    CONFIG ('Configuration', false),
    GROUP ('Consumed Group', true),
    NAME ('Consumed Artifact', true),
    VERSION ('Version', true),
    VERSION_REQUESTED ('Version Requested', true),
    
    String colName
    def length
    boolean dataDisplay
    
    DependencyColumn(def colName, boolean dataDisplay) {
        this.colName = colName
        this.length = colName.size()
        this.dataDisplay = dataDisplay
    }
    
}


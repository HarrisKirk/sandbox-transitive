import org.gradle.api.artifacts.result.ResolvedDependencyResult
import org.gradle.api.artifacts.result.ResolvedModuleVersionResult
import org.gradle.api.artifacts.result.ResolutionResult

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'eclipse'

//so that we can use 'compile', 'testCompile' for dependencies

dependencies {
  //for dependencies found in artifact repositories you can use
  //the string notation, e.g. group:name:version
  compile   'org.springframework.security:spring-security-core:3.1.0.RELEASE'
  
  compile group: 'com.google.code.guice', name: 'guice', version: '1.+'
}

println "HKHK: getAllDependencies()"
ResolutionResult rr1 = configurations.compile.incoming.resolutionResult

println "ResolutionResult (w/first level dependencies) ======================"
println rr1.root.id.name
rr1.root.dependencies.eachWithIndex { obj, i ->
    println "$i " + obj.selected.id.name
}

println ''
println "getAllModuleVersions ======================"
configurations.findAll {it.name == 'compile'}.each {
    println ''
    println "CONFIG '${it.name}'"  
    ResolutionResult rr = it.incoming.resolutionResult
    boolean isUnique = rr.getAllModuleVersions().size() == rr.getAllModuleVersions().unique(true).size()
    println "rr.getAllModuleVersions().size() = ${rr.getAllModuleVersions().size()}   unique = $isUnique"
    rr.getAllModuleVersions().eachWithIndex { obj, i ->
       ResolvedModuleVersionResult rmvr =  obj
       ModuleVersionIdentifier mvi = obj.id 
       println "$i ".padRight(5) + mvi.toString().padRight(50) 
    } 
}




//rr.getAllDependencies().eachWithIndex { obj, i ->
//    ResolvedDependencyResult rdr = obj
//    ResolvedModuleVersionResult rmvr = rdr.getSelected()
//    println i.toString().padRight(3) + (rmvr.getId().getName() + '-' + rmvr.getId().version).padRight(40) + "   (${rmvr.getSelectionReason()})"
//}

//println "HKHK: getAllComponents()"
//configurations.compile.incoming.resolutionResult.getAllComponents().eachWithIndex { obj, i ->
//    println "$i : $obj"
//}


project.task('printArtifactDependencies') {
    group 'RUP'
    description 'Prints all artifacts in dependencies blocks'
    doLast {
        def COLUMN_PAD = 2
        def SEP_CHAR = '-'
        final String GROUP_KEY = 'consumedGroup'
        final String OUTPUT_FILE_KEY = 'outputFile'
        if (!project.hasProperty(GROUP_KEY)) {
            throw new GradleException("Usage: gradlew -P${GROUP_KEY}=xxxx [-P${OUTPUT_FILE_KEY}=myfile] printArtifactDependencies")
        }
        
        Closure inclusionCriteria = {
            if (!it.group) return false   // gradle does not return group for some deps
            boolean intraProjectDependency = it.group == project.group
            boolean matchesUserPattern = it.group ==~ project.getProperty(GROUP_KEY)
            matchesUserPattern && !intraProjectDependency
        }
        def dependencyList = []
        project.allprojects.each { proj ->
            proj.configurations.each { conf ->
                conf.allDependencies.findAll(inclusionCriteria).each { dep ->
                    dependencyList << [
                        (DependencyColumn.PROJECT.name())     : proj.name,
                        (DependencyColumn.CONFIG.name())      : conf.name,
                        (DependencyColumn.GROUP.name())       : dep.group,
                        (DependencyColumn.NAME.name())        : dep.name,
                        (DependencyColumn.VERSION.name())     : dep.version
                        ]
                    }
            }
        }
         dependencyList.each { println it }
    }
}

enum DependencyColumn {
    REPO_NAME ('Consuming Repo', true),
    PROJECT ('Consuming Project', true),
    BRANCHES ('Branch', true),
    CONFIG ('Configuration', false),
    GROUP ('Consumed Group', true),
    NAME ('Consumed Artifact', true),
    VERSION ('Version', true),
    
    String colName
    def length
    boolean dataDisplay
    
    DependencyColumn(def colName, boolean dataDisplay) {
        this.colName = colName
        this.length = colName.size()
        this.dataDisplay = dataDisplay
    }
    
}

